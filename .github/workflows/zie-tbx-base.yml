name: CI
# on: 
#   schedule:
#     - cron: '0 0 * * MON'
  push:
    branches:
      - xmain
    paths-ignore:
      - '**/README.md'
env:
  REGISTRY: 'ghcr.io/${{ github.repository_owner }}'
  NAME: 'zie-base-toolbox'
  VERSION: '1.0.5'
jobs:
  zie:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
    - name: Log in to ghcr.io
      uses: redhat-actions/podman-login@v1
      with:
        username: ${{ github.repository_owner }}
        password: ${{ github.token }}
        registry: ${{ env.REGISTRY }}
    - name: Build
      run: |
        set -euxo pipefail
        CONTAINER=$(buildah from registry.fedoraproject.org/fedora-minimal)
        buildah config --label com.github.containers.toolbox="true" --label version="${{ env.VERSION }}" --label usage="This image is meant to be used with the toolbox command" --label summary="base toolbox based on fedora minimal" --label maintainer="Grant MacKenzie <grantmacken@gmail.com>" ${CONTAINER}
        buildah run ${CONTAINER} sh -c 'microdnf -y upgrade && microdnf -y reinstall bash coreutils-common curl findutils gawk grep libcap p11-kit rpm sed util-linux-core' &>/dev/null
        buildah run ${CONTAINER} sh -c 'microdnf -y install acl gnupg2 gzip openssl pam sudo systemd tar' &>/dev/null
        buildah run ${CONTAINER} sh -c 'microdnf -y install  python3 python3-pip' &>/dev/null
        buildah run ${CONTAINER} sh -c 'microdnf -y install bash-completion bc bzip2 diffutils dnf-plugins-core findutils flatpak-spawn fpaste git gnupg2 gnupg2-smime gvfs-client hostname iproute iputils keyutils krb5-libs less lsof man-db man-pages mesa-dri-drivers mesa-vulkan-drivers mtr nano-default-editor nss-mdns openssh-clients passwd pigz procps-ng rsync shadow-utils sudo tcpdump time traceroute tree unzip util-linux vte-profile vulkan-loader wget which whois words xorg-x11-xauth xz zip' &>/dev/null
        buildah run ${CONTAINER} sh -c 'microdnf -y install ninja-build cmake gcc make unzip gettext wl-clipboard' &>/dev/null
        buildah run ${CONTAINER} sh -c 'microdnf clean all -y' &>/dev/null
        buildah run ${CONTAINER} sh -c 'printenv' || true
        buildah run ${CONTAINER} sh -c 'git clone https://github.com/neovim/neovim && cd neovim && make CMAKE_BUILD_TYPE=RelWithDebInfo && make install' &>/dev/null
        buildah run ${CONTAINER} sh -c 'which nvim && nvim --version'
        buildah run ${CONTAINER} sh -c 'cd ../ && rm -R neovim'
        buildah commit ${CONTAINER} ${{ env.REGISTRY }}/${{ env.NAME }}
        # buildah tag ${{ env.REGISTRY }}/${{ env.NAME }}:latest ${{ env.REGISTRY }}/${{ env.NAME }}:${{ env.VERSION }}
        buildah push ${{ env.REGISTRY }}/${{ env.NAME }}:latest
